/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       matth                                                     */
/*    Created:      7/26/2023, 10:46:51 PM                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/
#include "vex.h"
#include "math.h"
#include "iostream"
#include <string.h>
#include <fstream>
#include <list>
#include <chrono>
#include <vector>
#include <sstream>

using namespace vex;

// A global instance of competition
competition Competition;

// constants used for physics and motion
const double TRACKWIDTH = 11.515;
const double PI = 3.1415;
const double G = -386.1; // 9.81 m/s but in inches/second^2
const double WHEEL_WIDTH = 4;
const double DRIVE_WHEEL_GEAR_RATIO = 5;
const double ARM_WHEEL_GEAR_RATIO = 5;
const double SHOOTER_WHEEL_GEAR_RATIO = 7;
const double ARM_MOTOR_STRIKE_ANGLE = -35;
const double SHOOTER_SPEED_MULTIPLIER = 1.317; // constant to multiply shooter motor rotation rate by after calculating its speed from equations, to account for error

int PLAYING_SIDE = 1; // -1 is left, 1 is right

class vector3 { // vectors in a more physical sense than c++'s default vectors

  public:

  double x;
  double y;
  double z;

  vector3(double x0, double y0, double z0) {
    x = x0;
    y = y0;
    z = z0;
  }

  vector3 difference(vector3 v) {
    return vector3(x-v.x, y-v.y, z-v.z);
  }

  double magnitude() {
    return sqrtf(x*x + y*y + z*z);
  }

  vector3 add(vector3 v) {
    return vector3(x+v.x, y+v.y, z+v.z);
  }

  vector3 mirror(int playingSide) {
    x *= playingSide;
    return *this;
  }

  vector3 mirror() {
    x *= PLAYING_SIDE;
    return *this;
  }

  void print(char* name, char* after) {
    printf("%s: {%f, %f, %f}%s", name, x, y, z, after);
  }
};

class Detection {
  public:
  int centerX;
  int centerY;
  int width;
  int height;
  int color;
  Detection(int x, int y, int w, int h, int c) {
    centerX = x;
    centerY = y;
    width = w;
    height = h;
    color = c;
  }
  Detection() {
    centerX = 0;
    centerY = 0;
    width = 0;
    height = 0;
    color = 0;
  }
};

// constant for the positions of key points, relative to the recalibration position

bool inTeleopPeriod = false;
const int TARGET_CENTER_AND_WAIT = -1;
const int TARGET_RED_HOOP = 0;
const int TARGET_BLUE_HOOP = 1;
const int TARGET_CENTER_HOOP = 2;
const int TARGET_YELLOW_BALL_HOLDER = 3;
// Positions of various targets.
// Vectors are in (forward, right, up) format.
// All court-object position vectors are relative to the centerline of the court, touching the back end.
vector3 RED_HOOP_POSITION = vector3(74, 39.5, 27.5);
vector3 BLUE_HOOP_POSITION = vector3(74, 24, 17);
vector3 CENTER_HOOP_POSITION = vector3(74, 0, 26);
vector3 YELLOW_BALL_HOLDER_POSITION = vector3(74, 39.5, 10);
vector3 INDICATOR_POSITION = vector3(74, 24, 10);
vector3 CORNER_POSITION = vector3(15, 50-15, 10);
//
vector3 TURRET_GIMBAL_POSITION = vector3(-0.2, 0, 1);
vector3 CAMERA_RELATIVE_TO_TURRET_GIMBAL_POSITION = vector3(5, 0, 1); 

// constant for aiming
// For ball shooting; the point along the trajectory that we want to be at by the time we enter the hoop.
// 0.5 is at the vertex, lower is sooner (travelling up when it enters the hoop), higher is later (travelling down when it enters the hoop).
const double TARGET_POINT_ALONG_TRAJECTORY = 0.6;

// constants used for P-controller gain and other guidance

const double TURNING_GAIN_FINE = -0.5;
const double TURNING_GAIN_BROAD = -0.1;
const double FORWARD_GAIN = 30;
const double COORDINATE_GUIDANCE_TURNING_GAIN = -5;
const double COORDINATE_GUIDANCE_DISTANCE_GAIN = 5;
const double MAX_DISTANCE_FROM_TARGET_NARROW = 10; // distance goal when driving to an objective
const double MAX_DISTANCE_FROM_TARGET_BROAD = 5; // acceptable distance when deciding whether to drive to an objective
const double MAX_ANGLE_FROM_BALL = 10;
const double MAX_ANGLE_FROM_HOOP = 1;
const double MAX_DISTANCE_FROM_BALL = 6;

// A global instance of vex::brain used for printing to the V5 brain screen
vex::brain Brain;

// setting motors
motor motorLeft = motor(PORT1, ratio18_1, false);
motor motorRight = motor(PORT10, ratio18_1, true);
motor motorShooterL = motor(PORT11, ratio18_1, false);
motor motorShooterR = motor(PORT12, ratio18_1, true);
motor motorArm = motor(PORT8, ratio18_1, false);
motor motorPusher = motor(PORT13, ratio18_1, false);

sonar sonarL = sonar(Brain.ThreeWirePort.E);
sonar sonarR = sonar(Brain.ThreeWirePort.C);

// setting inertial
inertial IMU = inertial(PORT3);

// setting camera color signatures and making a constant to be able to refer to color signatures by the object they detect rather than their signature number
const int RED_BALL = 1;
const int BLUE_BALL = 2;
const int YELLOW_BALL = 3;
const int RED_HOOP = 4;
//const int BLUE_HOOP = 5;
const int GREEN_INDICATOR = 6;
const int YELLOW_INDICATOR = 7;
vex::vision::signature RED_BALL_SIG = vex::vision::signature(1, 10049, 11513, 10781, -425, 1, -212, 4.1, 0);
vex::vision::signature BLUE_BALL_SIG = vex::vision::signature(2, -2427, -1747, -2087, 10357, 12053, 11205, 5, 0);
vex::vision::signature YELLOW_BALL_SIG = vex::vision::signature(3, 2109, 2857, 2483, -3791, -3283, -3537, 4.7, 0);
vex::vision::signature RED_HOOP_SIG = vex::vision::signature(4, 7157, 7819, 7488, -1105, -373, -739, 11, 0);
vex::vision::signature BLUE_HOOP_SIG = vex::vision::signature(5, 0, 0, 0, 0, 0, 0, 3, 0); // blue hoops get detected as blue balls
vex::vision::signature GREEN_INDICATOR_SIG = vex::vision::signature(6, -4647, -4369, -4508, -3549, -3157, -3353, 2.4, 0);
vex::vision::signature YELLOW_INDICATOR_SIG = vex::vision::signature(7, -1699, 101, -799, -4119, -3775, -3947, 3, 0);
vision camera = vision(PORT15, 50, RED_BALL_SIG, BLUE_BALL_SIG, YELLOW_BALL_SIG, RED_HOOP_SIG, BLUE_HOOP_SIG, GREEN_INDICATOR_SIG, YELLOW_INDICATOR_SIG);
const int CAMERA_PIXEL_WIDTH = 316;
const int CAMERA_PIXEL_HEIGHT = 212;
const int CAMERA_HORIZONTAL_FOV = 61;
const int CAMERA_VERTICAL_FOV = CAMERA_HORIZONTAL_FOV * (CAMERA_PIXEL_HEIGHT / CAMERA_PIXEL_WIDTH);
const double RADIANS_TO_DEGREES = 57.2957795131;
const double CAMERA_DEGREES_PER_PIXEL = 0.193037974684;
const double CAMERA_RADIANS_PER_PIXEL = 0.00336914823961;
const double WIDTH_BALL = 2.1;
const double WIDTH_HOOP = 0;
const double WIDTH_INDICATOR = 0;

// array for storage of currently held balls
std::vector<int> ballsHeld;

// array for keeping track of the ball types of detected balls when they get combined into a multi-scan list
std::vector<int> BALL_TYPES;

// boolean that can override the ball-search function in case time is low and it is a better idea to shoot existing low amounts of balls than to look for more balls
bool timeLimited = false;

// long for keeping track of the previous time position was calculated (isn't implemented yet, idk how time works with c++)
//std::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();
//auto now_ms = std::chrono::time_point_cast<std::chrono::milliseconds>(now);
double previousTime;

// calculated position coordinates
vector3 position = vector3(0,0,0);
double heading = 0;
double armAngle = 0;

// image to try and display on the screen for funzies
std::vector<int> values = {};
    
int IMAGE_PIXEL_RATIO = 4; // how many screen pixels each pixel of data should take up;

// functions and stuff below

struct shooterInputs {
  double angle;
  double velocity;
};

double getHeading() {
  return IMU.yaw();
}

void printPosition() {
  position.print("position", " ");
  printf("heading: %f\n", getHeading());
}

template <typename T>
std::string to_string(T value)
{
    std::ostringstream os ;
    os << value ;
    return os.str() ;
}

void printPositionToFile() {
  std::ofstream fileWriter;
  fileWriter.open("C:\\vexoutput.txt",std::ofstream::out | std::ofstream::trunc);
  std::string output1 = to_string(position.x);
  std::string output2 = to_string(position.y);
  std::string output3 = to_string(getHeading());
  fileWriter << (output1 + "\n");
  fileWriter << (output2 + "\n");
  fileWriter << (output3 + "\n");
  fileWriter.close();
}

void drawRect(double x0, double y0, double x1, double y1, int red, int green, int blue) {
  int SCALE = 1;
  int WIDTH = 480;
  int HEIGHT = 272;
  x0 *= SCALE;
  x1 *= SCALE;
  y0 *= SCALE;
  y1 *= SCALE;
  x0 += WIDTH*0.5;
  y0 += HEIGHT*0.5;
  color c = color(red, green, blue);
  Brain.Screen.setFillColor(c);
  Brain.Screen.drawRectangle(x0, y0, x1, y1);
}

void drawCircle(double x0, double y0, double radius, int red, int green, int blue) {
  int SCALE = 1;
  int WIDTH = 480;
  int HEIGHT = 272;
  x0 *= SCALE;
  y0 *= SCALE;
  radius *= SCALE;
  x0 += WIDTH*0.5;
  y0 += HEIGHT*0.5;
  color c = color(red, green, blue);
  Brain.Screen.setFillColor(c);
  Brain.Screen.drawCircle(x0, y0, radius);
}

void printPositionToScreen() {
  Brain.Screen.clearScreen();
  drawRect(0, 0, 98, 72, 80, 80, 80);
  drawRect(0, 36.5, 100, 1, 100, 70, 0);
  drawRect(0, -36.5, 100, 1, 127, 127, 255);
  drawRect(49.5, 0, 1, 74, 100, 70, 0);
  drawRect(-49.5, 0, 1, 74, 100, 70, 0);
  drawRect(0, -0.5*72+0.5*(72-26.5), 25, (72-26.5), 150, 150, 180);
  drawRect(0, 18, 98, 2, 200, 200, 200);
  drawRect(0, 22.75, 2, 26.5, 200, 200, 200);
  drawRect(-39.5, 0, 2, 72, 200, 200, 200);
  drawRect(39.5, 0, 2, 72, 200, 200, 200);
  drawCircle(position.x, position.y, 11, 127, 0, 0);
  double yawRotated = getHeading()-90;
  dx = cos(yawRotated/57.3);
  dy = sin(yawRotated/57.3);
  drawCircle(position.x + 9*dx, position.y + 9*dy, 2, 255, 0, 0);
}

void updatePosition() { // get global coordinates from motor speed and IMU heading
  double currentTime = Brain.timer(msec);
  double deltaTime = currentTime - previousTime;
  deltaTime /= 1000;
  previousTime = currentTime;

  //Brain.Screen.clearScreen();
  //Brain.Screen.setCursor(1,1);
  //Brain.Screen.print("deltaTime: ");
  //Brain.Screen.print(deltaTime);

  double motorForwardAngularSpeed = 0.5 * (motorLeft.velocity(dps) + motorRight.velocity(dps)) / RADIANS_TO_DEGREES; // forwards speed is the average velocity of the two wheels
  double forwardSpeed = motorForwardAngularSpeed * WHEEL_WIDTH/2 / DRIVE_WHEEL_GEAR_RATIO; // get inches/second speed from motor rotation rate

  double motorTurningAngularSpeed = (motorLeft.velocity(dps) - motorRight.velocity(dps)) / RADIANS_TO_DEGREES;
  //double turningSpeed

  double deltaDistance = forwardSpeed * deltaTime; // get distance travelled since last timestep
  double heading = getHeading() / RADIANS_TO_DEGREES; // convert heading to radians because c++ trig uses radians
  position.x += deltaDistance * cos(heading);
  position.y += deltaDistance * sin(heading);

  printPosition();
  printPositionToFile();
  printPositionToScreen();

  wait(50, msec); // hehe
}

void driveForwardDistance(double distance, double speed, bool wait) {
    double motorAngle = DRIVE_WHEEL_GEAR_RATIO * distance / (WHEEL_WIDTH * PI);
    motorLeft.setVelocity(speed, pct);
    motorRight.setVelocity(speed, pct);
    motorLeft.spinFor(forward, motorAngle, rev, false);
    motorRight.spinFor(forward, motorAngle, rev, wait);
}

void driveForwardSpeed(double speed) {
    motorLeft.spin(forward, speed, pct);
    motorRight.spin(forward, speed, pct);
}

void driveTurn(double angle, bool turnOnCenter, bool wait) {
    double rotations = angle/360;
    double wheelTravel = TRACKWIDTH * PI * rotations;
    double motorAngle = DRIVE_WHEEL_GEAR_RATIO * wheelTravel / (WHEEL_WIDTH * PI);
    if (turnOnCenter) {
        motorLeft.spinFor(forward, motorAngle, rev, false);
        motorRight.spinFor(reverse, motorAngle, rev, wait);
    } else {
        if (angle > 0) {
            motorLeft.spinFor(forward, motorAngle*2, rev, false);
        } else {
            motorRight.spinFor(reverse, motorAngle*2, rev, wait);
        }
    }
}

void driveCommand(double forwardPercent, double sidePercent) {
    motorLeft.spin(forward, forwardPercent + sidePercent, pct);
    motorRight.spin(forward, forwardPercent - sidePercent, pct);
    printf("Drive command of L: %f and R: %f\n", forwardPercent + sidePercent, forwardPercent - sidePercent);
}

void driveGlobal(vector3 positionDesired, double angle) { // turns and drives to desired global coordinates, then turns to desired angle
  double headingDesired = 0;
  double heading = 0;
  double headingError = 0;
  double distanceError = 0;
  
  heading = getHeading();
  headingError = headingDesired - heading;
  headingError = fmod((headingError + 540),360) - 180;
  bool flipDirection = (abs(headingError) > 90);
  flipDirection = false;
  
  do {
    double deltaX = positionDesired.x - position.x;
    double deltaY = positionDesired.y - position.y;
    headingDesired = atan2f(deltaY, deltaX) * RADIANS_TO_DEGREES; // convert heading to degrees because c++ trig uses radians
    heading = getHeading();
    headingError = headingDesired - heading + (flipDirection ? 180 : 0);
    headingError = fmod((headingError + 540), 360) - 180;
    distanceError = sqrtf(deltaX*deltaX + deltaY*deltaY);
    double speedMultiplier = fmax(20-fabs(headingError), 0)/20 * (flipDirection ? -1 : 1);
    driveCommand(distanceError * COORDINATE_GUIDANCE_DISTANCE_GAIN * speedMultiplier, headingError * COORDINATE_GUIDANCE_TURNING_GAIN);
    updatePosition();
    printf("(phase a) headingDesired = %f headingError = %f\n", headingDesired, headingError);
  } while (distanceError > MAX_DISTANCE_FROM_TARGET_NARROW || fabs(headingError) > 10);
  driveForwardDistance(MAX_DISTANCE_FROM_TARGET_NARROW,100,true);
  do {
    headingDesired = angle;
    heading = getHeading();
    headingError = headingDesired - heading;
    headingError = fmod((headingError + 540), 360) - 180;
    headingError *= COORDINATE_GUIDANCE_TURNING_GAIN;
    driveCommand(0, headingError);
    updatePosition();
    printf("(phase b) headingDesired = %f headingError = %f\n", headingDesired, headingError);
  } while (headingError > MAX_ANGLE_FROM_BALL);
}

//void recalibrate() {
//  driveGlobal()
//}

shooterInputs calculateShotAngleAndVelocity(vector3 targetPosition) {
  double distanceX = sqrtf((targetPosition.x - position.x)*(targetPosition.x - position.x) + (targetPosition.y - position.y)*(targetPosition.y - position.y));
  double distanceY = targetPosition.z;
  double desiredVelocityY = sqrt((-0.5*distanceY*G)/(TARGET_POINT_ALONG_TRAJECTORY - TARGET_POINT_ALONG_TRAJECTORY*TARGET_POINT_ALONG_TRAJECTORY));
  double desiredVelocityX = (distanceX*G)/(-desiredVelocityY + ((TARGET_POINT_ALONG_TRAJECTORY > 0.5) ? -1 : 1) * sqrt(desiredVelocityY*desiredVelocityY + 2*distanceY*G));
  double desiredAngle = atan2f(desiredVelocityY, desiredVelocityX);
  double desiredVelocity = sqrt(desiredVelocityX*desiredVelocityX + desiredVelocityY*desiredVelocityY);
  shooterInputs output;
  output.angle = desiredAngle;
  output.velocity = desiredVelocity;
  return output;
}

void resetArmAngle() {
  Brain.Screen.setCursor(1,1);
  Brain.Screen.print(motorArm.current());
  Brain.Screen.setCursor(10,10);
  Brain.Screen.print(motorArm.velocity(rpm));
  motorArm.spin(reverse,30,pct);
  wait(50,msec);
  while (motorArm.current() < 2 || fabs(motorArm.velocity(rpm)) > 5) {
    motorArm.spin(reverse, 30, pct);
  }
  motorArm.stop();
  wait(50,msec);
  motorArm.resetPosition();
  motorArm.spinTo(-ARM_MOTOR_STRIKE_ANGLE, deg, true);
  wait(50,msec);
  motorArm.resetPosition();
}

void resetMotorAngle(motor m, double strikeAngle, vex::directionType dir) {
  Brain.Screen.setCursor(1,1);
  Brain.Screen.print(motorArm.current());
  Brain.Screen.setCursor(10,10);
  Brain.Screen.print(motorArm.velocity(rpm));
  m.spin(dir,30,pct);
  wait(50,msec);
  while (motorArm.current() < 2 || fabs(motorArm.velocity(rpm)) > 5) {
    m.spin(dir, 30, pct);
  }
  m.stop();
  wait(50,msec);
  m.resetPosition();
  m.spinTo(strikeAngle * (dir==forward?1:-1), deg, true);
  wait(50,msec);
  m.resetPosition();
}

void reverseToWall() {
  //while (motorLeft.current() < 2 || motorLeft.velocity(rpm) > 5) {
  //  motorLeft.spin(reverse, 100, pct);
  //  motorRight.spin(reverse, 100, pct);
  //}
  driveForwardDistance(-10, 100, true);
  motorLeft.stop();
  motorRight.stop();
}

void resetPosition() {
  IMU.calibrate();
  while(IMU.isCalibrating()) {
    wait(1, msec);
  }
  position = vector3(6,30*PLAYING_SIDE,1);
  printPosition();
  Brain.resetTimer();
  previousTime = 0;
  updatePosition();
}

void setArmAngle(double angle) {
  armAngle = angle;
  motorArm.spinTo(angle*ARM_WHEEL_GEAR_RATIO, deg, true);
}

double getArmAngle() {
  return armAngle;
}

void setShooterDirection(int input) {
  motorShooterL.spin(reverse, -100*input, pct);
  motorShooterR.spin(reverse, -100*input, pct);
}

void setShooterSpeed(double velocity) { // sets shooter motors to spin at the right rate to reach a target speed in inches/second
  double targetAngularSpeed = velocity / (0.5*WHEEL_WIDTH); // shooter uses wheels, so this uses wheel width
  targetAngularSpeed *= 9.549297; // radians to rpm
  targetAngularSpeed /= SHOOTER_WHEEL_GEAR_RATIO;
  targetAngularSpeed *= SHOOTER_SPEED_MULTIPLIER; // accounts for error
  motorShooterL.spin(forward, targetAngularSpeed, rpm);
  motorShooterR.spin(forward, targetAngularSpeed, rpm);
}

vex::vision::object getLargestObject(std::vector<vex::vision::object> objects) {
  int largestXSize = 0;
  vex::vision::object largestObject;
  for (int i = 0; i < objects.size(); i++) {
    if (objects.at(i).width > largestXSize) {
      largestXSize = objects.at(i).width;
      largestObject = objects.at(i);
    }
  }
  return largestObject;
}

Detection getLargestObject(std::vector<Detection> objects) {
  int largestXSize = 0;
  Detection largestObject;
  for (int i = 0; i < objects.size(); i++) {
    if (objects.at(i).width > largestXSize) {
      largestXSize = objects.at(i).width;
      largestObject = objects.at(i);
    }
  }
  return largestObject;
}

int getLargestObjectId(std::vector<Detection> objects) {
  int largestXSize = 0;
  int largestId = 0;
  for (int i = 0; i < objects.size(); i++) {
    if (objects.at(i).width > largestXSize) {
      largestXSize = objects.at(i).width;
      largestId = i;
    }
  }
  return largestId;
}

int getLargestObjectPosX_SingleScan(vex::vision::object object) {
  return object.centerX - CAMERA_PIXEL_WIDTH*0.5; // X is normally based on 0 - CAMERA_PIXEL_WIDTH, but this adjusts it so centered = 0
}

int getLargestObjectPosX_MultipleScans(std::vector<Detection> objects) {
  return getLargestObject(objects).centerX - CAMERA_PIXEL_WIDTH*0.5; // X is normally based on 0 - CAMERA_PIXEL_WIDTH, but this adjusts it so centered = 0
}

Detection getDetectionClosestTo(std::vector<Detection> objects, int x, int y) {
  double lowestDistance = 9999999;
  Detection closestObject;
  for (int i = 0; i < objects.size(); i++) {
    Detection object = objects.at(i);
    int deltaX = object.centerX - x;
    int deltaY = object.centerY - y;
    double distance = vector3(deltaX, deltaY, 0).magnitude();
    if (distance < lowestDistance) {
      lowestDistance = distance;
      closestObject = object;
    }
  }
  return closestObject;
}

double getObjectDistance(int objectPixelWidth, double objectWidth) {
  double objectFullArcAngle = objectPixelWidth * CAMERA_RADIANS_PER_PIXEL;
  double objectDistance = objectWidth / tanf(objectFullArcAngle);
  //printf("getObjectDistance diagnosis: pixelWidth:%d, objectWidth:%f, objectFullArcAngle:%f, objectDistance:%f, radiansPerPixel:%f, radiansToDegrees:%f\n", objectPixelWidth, objectWidth, objectFullArcAngle, objectDistance, CAMERA_RADIANS_PER_PIXEL, RADIANS_TO_DEGREES);
  //objectDistance += TURRET_GIMBAL_POSITION.add(CAMERA_RELATIVE_TO_TURRET_GIMBAL_POSITION).x;
  return objectDistance;
}

double getLargestObjectDistance_SingleScan(vex::vision::object object, double objectWidth) {
  return getObjectDistance(object.width, objectWidth);
}

double getLargestObjectDistance_MultipleScans(double objectWidth, std::vector<Detection> objects) {
  return getObjectDistance(getLargestObject(objects).width, objectWidth);
}

void printDetection(vex::vision::object obj) {
  printf("X: %d Y: %d WIDTH: %d HEIGHT: %d\n", obj.centerX, obj.centerY, obj.width, obj.height);
}

void printDetection(Detection obj) {
  printf("X: %d Y: %d WIDTH: %d HEIGHT: %d\n", obj.centerX, obj.centerY, obj.width, obj.height);
}

void printDetections(std::vector<vex::vision::object> objects) {
  for (int i = 0; i < objects.size(); i++) {
    vex::vision::object obj = objects.at(i);
    printf("i: %d X: %d Y: %d WIDTH: %d HEIGHT: %d\n", i, obj.centerX, obj.centerY, obj.width, obj.height);
  }
}

void printDetections(std::vector<Detection> objects) {
  for (int i = 0; i < objects.size(); i++) {
    Detection obj = objects.at(i);
    printf("i: %d X: %d Y: %d WIDTH: %d HEIGHT: %d COLOR: %d\n", i, obj.centerX, obj.centerY, obj.width, obj.height, obj.color);
  }
}

Detection convertObject(vex::vision::object object, int color) {
  return Detection(object.centerX, object.centerY, object.width, object.height, color);
}

std::vector<Detection> snapshotMultipleColors(std::vector<int> colors) {
  std::vector<int> ballTypes;
  std::vector<Detection> combinedData;
  for (int c = 0; c < colors.size(); c++) {
    camera.takeSnapshot(colors.at(c));
    //printf("CAMERA DETECTIONS FOR COLOR %d:", colors.at(c));
    //printDetection(camera.largestObject);
    for (int j = 0; j < camera.objectCount; j++) {
      ballTypes.push_back(colors.at(c));
      Detection obj = convertObject(camera.objects[j], colors.at(c));
      //printf("CAMERA DETECTION %d:", j);
      //printDetection(obj);
      combinedData.push_back(obj); 
    }
  }
  BALL_TYPES = ballTypes;
  //printf("CAMERA DETECTIONS FOR ALL COLORS\n");
  //printDetections(combinedData);
  return combinedData;
}

vector3 rotateVectorByAzimuthAndElevation(vector3 v, double azimuth, double elevation) {
  azimuth /= RADIANS_TO_DEGREES;
  elevation /= RADIANS_TO_DEGREES;
  vector3 v2 = vector3(v.x*cos(elevation) - v.z*sin(elevation), v.y, v.z*cos(elevation) + v.x*sin(elevation)); // rotate by elevation
  vector3 v3 = vector3(v2.x*cos(azimuth) + v2.y*sin(azimuth), v2.y*cos(azimuth) - v2.x*sin(azimuth), v2.z); // rotate by azimuth
  return v3;
}

vector3 getDetectionPositionAsBall_OLD(Detection obj) { // get the worldspace position
  double distance = getObjectDistance(obj.width, WIDTH_BALL);
  distance += 0.5*WIDTH_BALL;
  double azimuth = (obj.centerX - 0.5*CAMERA_PIXEL_WIDTH) * CAMERA_DEGREES_PER_PIXEL;
  double elevation = (obj.centerY - 0.5*CAMERA_PIXEL_HEIGHT) * CAMERA_DEGREES_PER_PIXEL;
  vector3 ballPosition_TurretspaceRelativeToCamera = rotateVectorByAzimuthAndElevation(vector3(distance, 0, 0), -azimuth, -elevation);
  vector3 ballPosition_TurretspaceRelativeToGimbal = ballPosition_TurretspaceRelativeToCamera.difference(CAMERA_RELATIVE_TO_TURRET_GIMBAL_POSITION);
  vector3 ballPosition_Vehiclespace = rotateVectorByAzimuthAndElevation(ballPosition_TurretspaceRelativeToGimbal, 0, -getArmAngle()).difference(TURRET_GIMBAL_POSITION);
  vector3 ballPosition = rotateVectorByAzimuthAndElevation(ballPosition_Vehiclespace, -getHeading(), 0).add(position);
  return ballPosition;
}

vector3 getDetectionPositionAsBall(Detection obj) { // heavily simplified verison of the function above because it wasnt working
  double distance = getObjectDistance(obj.width, WIDTH_BALL);
  double azimuth = (obj.centerX - 0.5*CAMERA_PIXEL_WIDTH) * CAMERA_DEGREES_PER_PIXEL;
  azimuth += getHeading();
  azimuth /= RADIANS_TO_DEGREES;
  vector3 ballPosition = vector3(distance * cos(azimuth), distance * sin(azimuth), 1);
  return ballPosition;
}

bool ballPosition_InPlayingSpace(vector3 v) {
  vector3 buffer = vector3(-3, -3, 10); // Amount past the course dimensions we are willing to take
  double rampAvoidDistance = 3;
  if (v.x < -buffer.x) { return false; } // ball would be behind court
  if (v.x > 74 + buffer.x) { return false; } // ball would be behind wall
  if (fabs(v.z - 0.5*WIDTH_BALL) > buffer.z) { return false; } // ball would be above/underground
  if (fabs(v.y) > 50 + buffer.y) { return false; } // ball would be off the sides of the court
  if (fabs(v.y) < 12.5 + rampAvoidDistance - 0.5*buffer.x) { return false; } // ball would be near the ramp
  return true;
}

bool detectionAsBall_InPlayingSpace(Detection obj) {
  return ballPosition_InPlayingSpace(getDetectionPositionAsBall(obj));
}

bool detectionAsBall_GoodY(Detection obj) {
  /*double elevation = (obj.centerY - 0.5*CAMERA_PIXEL_HEIGHT) * CAMERA_DEGREES_PER_PIXEL;
  elevation += getArmAngle();
  if (elevation < 30) {
    return false;
  }
  return true;*/
  if (obj.centerY > CAMERA_PIXEL_HEIGHT*0.6) {
    return true;
  }
  return false;
}

std::vector<Detection> filterDetectionsForValidBalls(std::vector<Detection> input) {
  std::vector<Detection> validBalls;
  for (int i = 0; i < input.size(); i++) {
    //if (detectionAsBall_InPlayingSpace(input.at(i))) {
    if (detectionAsBall_GoodY(input.at(i))) {
      validBalls.push_back(input.at(i));
    }
  }
  return validBalls;
}

void getPlayingSide() {
  /*printf("start marker\n");
  std::vector<Detection> yellowIndicatorDetections = snapshotMultipleColors(std::vector<int>{YELLOW_INDICATOR});
  std::vector<Detection> greenIndicatorDetections = snapshotMultipleColors(std::vector<int>{GREEN_INDICATOR});
  printf("YELLOW\n");
  printDetections(yellowIndicatorDetections);
  camera.takeSnapshot(YELLOW_INDICATOR);
  printf("yellow count real: %d", camera.objectCount);
  printf("GREEN\n");
  printDetections(greenIndicatorDetections);
  double indicatorAverageCameraX;
  Detection yellowIndicator = getDetectionClosestTo(yellowIndicatorDetections, 0, 0);
  Detection greenIndicator = getDetectionClosestTo(greenIndicatorDetections, 0, 0);
  if (yellowIndicatorDetections.size() > 0 && greenIndicatorDetections.size() > 0) {
    indicatorAverageCameraX = 0.5*(yellowIndicator.centerX + greenIndicator.centerX);
    PLAYING_SIDE = (yellowIndicator.centerX > greenIndicator.centerX) ? -1 : 1;
  } else {
    if (yellowIndicatorDetections.size() > 0) {
      indicatorAverageCameraX = yellowIndicator.centerX;
      PLAYING_SIDE = (yellowIndicator.centerX > 0) ? -1 : 1;
    } else if (greenIndicatorDetections.size() > 0) {
      indicatorAverageCameraX = greenIndicator.centerX;
      PLAYING_SIDE = (yellowIndicator.centerX > 0) ? -1 : 1;
    } else {
      printf("----------------YELLOW+GREEN INDICATOR DETECTION FAIL--------------\n");
    }
    
  }*/
  PLAYING_SIDE = (sonarL.distance(inches) < sonarR.distance(inches)) ? -1 : 1;
  
  printf("playign side %d\n", PLAYING_SIDE);
  double oldY = position.y;
  /*vector3 cameraWorldPosition = position.add(TURRET_GIMBAL_POSITION.add(CAMERA_RELATIVE_TO_TURRET_GIMBAL_POSITION));
  double xDistance = 74 - cameraWorldPosition.x;
  double indicatorAverageAngle = indicatorAverageCameraX * CAMERA_RADIANS_PER_PIXEL;
  double yDistance = xDistance * sinf(indicatorAverageAngle);
  double theoreticalYDistance = INDICATOR_POSITION.y - cameraWorldPosition.y;
  position.y += (theoreticalYDistance - yDistance);*/
  double sonarYDistanceFromCOM = 5.75;
  switch (PLAYING_SIDE) {
    case -1: {position.y = -49 + sonarL.distance(inches) + sonarYDistanceFromCOM;}
    case 1:  {position.y =  49 - sonarR.distance(inches) - sonarYDistanceFromCOM;}
  }
    
  
  //printf("oldY: %f xDistance: %f  indicatorAverageCameraX: %f indicatorAverageAngle: %f yDistance: %f theoreticalYDistance: %f",
  //        oldY,    xDistance,     indicatorAverageCameraX,    indicatorAverageAngle,    yDistance,    theoreticalYDistance);
  printf("Y position adjusted from %f to %f\n", oldY, position.y);
}

void applyPlayingSide() {
  RED_HOOP_POSITION.mirror();
  BLUE_HOOP_POSITION.mirror();
  CENTER_HOOP_POSITION.mirror();
  YELLOW_BALL_HOLDER_POSITION.mirror();
  INDICATOR_POSITION.mirror();
  CORNER_POSITION.mirror();
}

void printData(std::vector<int> data) {
  for (int i = 0; i < data.size(); i++) {
    printf("DATAPOINT %d: %d", i, data.at(i));
  }
}

vex::color colorOfDetectionType(int i) {
  switch(i) {
    case 1: return vex::color::red;
    case 2: return vex::color::blue;
    case 3: return vex::color::yellow;
  }
  return vex::color::white;
}

void printDetectionsOntoScreen(std::vector<Detection> objects, int color) {
  for (int i = 0; i < objects.size(); i++) {
    Detection o = objects.at(i);
    Brain.Screen.drawRectangle(o.centerX-0.5*o.width, o.centerY-0.5*o.height, o.width, o.height, colorOfDetectionType(color));
  }
}

void yellowBallRun() { // The part of the auto script that runs towards the yellow ball at the beginning of the match
  // Shooter should already be set to intake mode from the setup phase.
  int ballDistance;
  int yellowBallFails = 0;
  int YELLOW_BALL_MAX_FAILS = 100;
  // Angle turret to yellow-ball-grabbing height
  //[ARM NOT ATTACHED] setArmAngle(15);
  // Align camera with largest yellow target and slam the throttle. Get to the yellow ball as fast as possible for the easy 10 points.
  do {
    std::vector<Detection> yellowBallDetections = snapshotMultipleColors(std::vector<int>{YELLOW_BALL});
    if (yellowBallDetections.size() == 0) {
      yellowBallFails++;
    }
    if (yellowBallFails > YELLOW_BALL_MAX_FAILS) {
      printf("Yellow ball failed to grab");
      return;
    }
    printf(".");
    ballDistance = getLargestObjectDistance_MultipleScans(WIDTH_BALL, yellowBallDetections);
    double error = getLargestObjectPosX_MultipleScans(yellowBallDetections) * TURNING_GAIN_FINE;
    driveCommand(100, error);
    updatePosition();
    printf("Ball distance: %d Error: %f\n", ballDistance, error);
    wait(10, msec);
  } while (ballDistance > 5);
  printf("Yellow ball grabbed");
  // Reverse to around the starting position.
  driveForwardDistance(8, 50, true);
  driveForwardDistance(-12, 100, true);
}

void ballSearch_GrabFoundBall() { // A preset motion that moves towards balls to pick them up
  driveForwardDistance(8, 50, true);
  driveForwardDistance(-12, 100, true);
}

void ballSearch_GuidanceLoop(std::vector<Detection> ballsDetected) { // The part of the ball-searching script that loops
  Detection ball = getLargestObject(ballsDetected);
  double distance = getLargestObjectDistance_MultipleScans(WIDTH_BALL, ballsDetected);
  double posX = getLargestObjectPosX_MultipleScans(ballsDetected);
  //   a. Check FOV for balls. If ball count is below the threshold, reverse/look around until one is found.
  //if ((ballsDetected.size() > 0 || distance > 30) && !timeLimited) {
  if (ballsDetected.size() != 0 && distance < 30) {
    //   b. Align to ball, move towards ball until at edge of camera's visual range
    double errorTurning = posX * TURNING_GAIN_BROAD * distance;
    double angle = fabs(posX * CAMERA_DEGREES_PER_PIXEL);
    double errorForward = (distance - MAX_DISTANCE_FROM_BALL*0.7) * FORWARD_GAIN;
    double speedMultiplier = fmax(90-angle, 0)/90;
    errorForward *= speedMultiplier;
    errorForward = fmin(errorForward, 70);
    driveCommand(errorForward, errorTurning);
    printf(".");
    if (distance < MAX_DISTANCE_FROM_BALL && angle < MAX_ANGLE_FROM_BALL) {
      //   c. Preset ball-grab sequence since now blind
      printf("Adding value %d to ballsHeld", ball.color);
      ballsHeld.push_back(ball.color);
      ballSearch_GrabFoundBall();
      printf("Ball grabbed");
      //   d. Keep track of held balls with a list
    }
  } else {
    driveCommand(0, 100);
  }
}

void printBallCoordinates(std::vector<Detection> balls) {
  for (int i = 0; i < balls.size(); i++) {
    vector3 ballPosition = getDetectionPositionAsBall(balls.at(i));
    printf("Ball %d: {%f, %f, %f} with color %d\n", i, ballPosition.x, ballPosition.y, ballPosition.z, balls.at(i).color);
    Brain.Screen.setCursor(1,1);
    Brain.Screen.print("Ball %d: {%f, %f, %f} with color %d\n", i, ballPosition.x, ballPosition.y, ballPosition.z, balls.at(i).color);
  }
  for (int i = 10; i > balls.size(); i--) {
    printf("\n");
  }
}

void searchForBalls() { // The part of the auto script that searches for balls when it needs more
  // Rev shooter to full/partial speed reverse
  setShooterDirection(1);
  // threshold = number of balls we need to have loaded before we start shooting them.
  std::vector<int> ballTypes = {RED_BALL, BLUE_BALL};
  std::vector<Detection> ballsDetected = snapshotMultipleColors(ballTypes);
  printf("-------------------------\nBall detections before filtering positions:\n");
  printDetections(ballsDetected);
  ballsDetected = filterDetectionsForValidBalls(ballsDetected);
  printf("Ball detections after filtering positions:\n");
  printDetections(ballsDetected);

  int BALL_THRESHOLD = 4;
  // While >0 balls seen, or ball count is below the threshold:
  while (ballsDetected.size() > 0 || ballsHeld.size() < BALL_THRESHOLD) {
    
    ballsDetected = snapshotMultipleColors(ballTypes);
    Brain.Screen.clearScreen();
    printDetectionsOntoScreen(ballsDetected, 1);
    printBallCoordinates(ballsDetected);
    ballsDetected = filterDetectionsForValidBalls(ballsDetected);
    printDetectionsOntoScreen(ballsDetected, 2);
    ballSearch_GuidanceLoop(ballsDetected);
    position = vector3(0,0,0);
    updatePosition();
    
    if (timeLimited) {return;}
  }
}

int getTargetHoop(int ball) { // Get the hoop we should aim to based on the current ball and auto vs. teleop period.
  if (inTeleopPeriod) {
    switch(ball) {
      case RED_BALL: return TARGET_RED_HOOP;
      case BLUE_BALL: return TARGET_CENTER_HOOP;
      case YELLOW_BALL: return TARGET_CENTER_HOOP;
      default: printf("getTargetHoop given invalid input of %d", ball); return -2;
    }
  } else {
    switch (ball) {
      case RED_BALL: return TARGET_RED_HOOP;
      case BLUE_BALL: return TARGET_BLUE_HOOP;
      case YELLOW_BALL: return TARGET_CENTER_AND_WAIT;
      default: printf("getTargetHoop given invalid input of %d", ball); return -2;
    }
  }
}

vector3 getTargetPosition(int target) {
  switch(target) {
    case TARGET_CENTER_AND_WAIT: return CORNER_POSITION;
    case TARGET_RED_HOOP: return RED_HOOP_POSITION;
    case TARGET_BLUE_HOOP: return BLUE_HOOP_POSITION;
    case TARGET_CENTER_HOOP: return CENTER_HOOP_POSITION;
    case TARGET_YELLOW_BALL_HOLDER: return YELLOW_BALL_HOLDER_POSITION;
    default: printf("getTargetPosition given invalid input of %d", target); return vector3(0,0,0);
  }
}

void pushBall() {
  double PUSH_BALL_ANGLE = 180; // the angle the pusher motor needs to rotate to push one ball out
  motorPusher.spinFor(PUSH_BALL_ANGLE, deg);
}

void resetPusherPosition() {
  double PUSHER_DEFAULT_ANGLE = 15; // the angle the pusher motor rests at
  motorPusher.spinTo(PUSHER_DEFAULT_ANGLE, deg, true);
}

void shootBalls() {
  // While >0 balls in clip:
  while (ballsHeld.size() > 0) {
    int ball = ballsHeld.at(ballsHeld.size()-1);
    int target = getTargetHoop(ball);
    if (target == TARGET_CENTER_AND_WAIT && !timeLimited) {
      return;
    }
    // a. Drive to a known hoop position
    // b. Align to hoop
    vector3 targetPosition = getTargetPosition(target);
    vector3 deltaPosition = targetPosition.difference(position);
    double angleToTarget = atan2f(deltaPosition.x, deltaPosition.y) * RADIANS_TO_DEGREES;
    vector3 driveSpot = vector3(20, 30*PLAYING_SIDE, 0);
    if (position.difference(driveSpot).magnitude() > MAX_DISTANCE_FROM_TARGET_BROAD) {
      driveGlobal(driveSpot, angleToTarget);
    }
    // c. Calculate hoop distance based off of vertical+horizontal size in camera's FOV and known vertical distance
    // d. Calculate necessary turret angle + shooter spinrate based off of math
    deltaPosition = targetPosition.difference(position);
    shooterInputs inputs = calculateShotAngleAndVelocity(deltaPosition);
    // e. Adjust bot angle + turret angle + shooter spinrate until within a margin of error
    setArmAngle(inputs.angle);
    setShooterSpeed(inputs.velocity);
    wait(10, msec);
    // f. Push one ball out with the piston system (the piston positions are preset/known, no calculations or readings needed to see if the ball is shot out)
    pushBall();
    printf("ball of color %d fired", ball.color);
    ballsHeld.pop_back();
  }
  resetPusherPosition();
}

unsigned long hex2dec(char hexChar) // this function is not mine
{
    std::string hex(1, hexChar);
    unsigned long result = 0;
    for (int i=0; i<hex.length(); i++) {
        if (hex[i]>=48 && hex[i]<=57)
        {
            result += (hex[i]-48)*pow(16,hex.length()-i-1);
        } else if (hex[i]>=65 && hex[i]<=70) {
            result += (hex[i]-55)*pow(16,hex.length( )-i-1);
        } else if (hex[i]>=97 && hex[i]<=102) {
            result += (hex[i]-87)*pow(16,hex.length()-i-1);
        }
    }
    return result;
}

double getHueFromRGB(std::string inputHex) { // algorithm from someone on stackExchange idk
  /*double red = 16*(int)hex2dec(inputHex[1]) + (int)hex2dec(inputHex[2]);
  double green = 16*(int)hex2dec(inputHex[3]) + (int)hex2dec(inputHex[4]);
  double blue = 16*(int)hex2dec(inputHex[5]) + (int)hex2dec(inputHex[6]);
  red /= 255;
  green /= 255;
  blue /= 255;
  double max;
  if (red > green && red > blue) {max = red;}
  else if (green > red && green > blue) {max = green;}
  else {max = blue;}
  double min;
  if (red < green && red < blue) {min = red;}
  else if (green < red && green < blue) {min = green;}
  else {min = blue;}
  double hue;
  if (max == red) {hue = (green-blue);}
  else if (max == green) {hue = 2 + (blue-red);}
  else {hue = 4 + (red-green);}
  hue *= 60/(max-min);
  if (hue < 0) {hue += 360;}
  return hue;*/
  double red = 16*(int)hex2dec(inputHex[1]) + (int)hex2dec(inputHex[2]);
  double hue = red * (100/(double)256);
  return hue;
}

char* intToChar(int value) {
  char* buffer = new char[10];
  sprintf(buffer, "%d", value);
  return buffer;
}

void printImage() {
  int pixels[480/IMAGE_PIXEL_RATIO][272/IMAGE_PIXEL_RATIO][3];
  for (int x = 0; x < 480; x += IMAGE_PIXEL_RATIO) {
      for (int y = 0; y < 272; y+= IMAGE_PIXEL_RATIO) {
          int i = (272/IMAGE_PIXEL_RATIO)*(x/IMAGE_PIXEL_RATIO) + (y/IMAGE_PIXEL_RATIO);
          int rgb = values[i];
          int blue = rgb % 256;
          rgb /= 256;
          int green = rgb % 256;
          rgb /= 256;
          int red = rgb;
          pixels[x/IMAGE_PIXEL_RATIO][y/IMAGE_PIXEL_RATIO][0] = red;
          pixels[x/IMAGE_PIXEL_RATIO][y/IMAGE_PIXEL_RATIO][1] = green;
          pixels[x/IMAGE_PIXEL_RATIO][y/IMAGE_PIXEL_RATIO][2] = blue;
      }
  }
  for (int x = 0; x < 480; x++) {
    for (int y = 0; y < 272; y++) {
      int px = x/IMAGE_PIXEL_RATIO;
      int py = y/IMAGE_PIXEL_RATIO;
      int red = pixels[px][py][0];
      int green = pixels[px][py][1];
      int blue = pixels[px][py][2];
      vex::color color = vex::color(red, green, blue);
      Brain.Screen.setPenColor(color);
      Brain.Screen.drawPixel(x,y);
      /*char* hexColor = "#      ";
      for (int j = 0; j < 6; j++) {
        hexColor[j+1] = image[i+j];
      }*/
      //std::string hexColor = "#" + image.substr(i, i+6);
      //hexColor = "#ffffff";
      //int hueColor = fmod(i,360);
      //if (hueColor < 120) {
      //  hueColor = 0;
      //} else {
      //  hueColor = 180;
      //}
      //hueColor = getHueFromRGB(hexColor);
      //hueColor = 100 + x - y;
      //Brain.Screen.setPenColor(hueColor);
      //Brain.Screen.drawPixel(x,y);
      //printf("%s",hexColor.c_str());
      //printf("%s\n",intToChar(hueColor));
    }
  }
}

/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/



void pre_auton(void) {

  // All activities that occur before the competition starts
  // Example: clearing encoders, setting servo positions, ...
  //
  // uses a physical-contact position resetting technique
  //resetArmAngle();
  // shooter should be on intake mode at the beginning
  //setShooterDirection(-1);
  // calibrate the position + rotation by reversing back to the wall and resetting the IMU's position
  printf("milestone\n");
  //reverseToWall();
  printf("milestone\n");
  resetPosition();
  printf("milestone\n");
  getPlayingSide();
  printf("Playing side: %d", PLAYING_SIDE);
}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void autonomous(void) {
  // ..........................................................................
  // Insert autonomous user code here.
  // ..........................................................................

  // ..........................................................................
  // What I'm thinking for the auto loop:
  //
  //
  // 
  while(1) {
    // PART 1: YELLOW BALL RUN
    yellowBallRun();

    // PART 2: SEARCH FOR BALLS
    searchForBalls();
    // PART 3: SHOOT BALLS

    shootBalls();
    // Angle turret to some positive value like +30deg
    // ..........................................................................
  }

}

/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/

void usercontrol(void) {
  // User control code here, inside the loop
  while (1) {
    // This is the main execution loop for the user control program.
    // Each time through the loop your program should update motor + servo
    // values based on feedback from the joysticks.

    // ........................................................................
    // Insert user code here. This is where you use the joystick values to
    // update your motors, etc.
    // ........................................................................

    // ..........................................................................
    // What I'm thinking for the manual loop:
    //
    // Either the below or just a continutation of auto control
    //
    // LEFT JOYSTICK
    //   X+Y: Directional control of the robot while not performing another action.
    //
    // LEFT BUMPERS
    //   Top: Set robot to shooting mode. Robot will force-enter this mode if time is low or ball storage is full.
    //   Bottom: Set robot to intake mode.
    // ..........................................................................

    wait(20, msec); // Sleep the task for a short amount of time to
                    // prevent wasted resources.
  }
}

//
// Main will set up the competition functions and callbacks.
//
int main() {
  /* ---------- REAL CODE FOR THE COMPETITION ---------- */
  // Set up callbacks for autonomous and driver control periods.
  //Competition.autonomous(autonomous);
  //Competition.drivercontrol(usercontrol);
  //setShooterDirection(-1);
  //printImage();
  //printf("done1\n");
  //setShooterDirection(1);
  //printf("/SFhkfdhjksdf\n");
  pre_auton();
  //autonomous();
  driveGlobal(vector3(40, 30, 0).mirror(), 180);
  driveGlobal(vector3(30, 30, 0).mirror(), 0);
  driveGlobal(vector3(20, 30, 0).mirror(), 0);
  driveGlobal(vector3(30, 30, 0).mirror(), 0);
  driveGlobal(vector3(40, 30, 0).mirror(), -180);
  driveForwardDistance(1000, 100, true);
  wait(1000000000,sec);
  // Run the pre-autonomous function.
  //while(true) {
  //  printf("distanceL: %f\n", sonarL.distance(inches));
  //  printf("distanceR: %f\n", sonarR.distance(inches));
  //  wait(10, msec);
  //}
  //pre_auton();
  
  //driveGlobal(vector3(30, 25, 0).mirror(), 0);

  // Prevent main from exiting with an infinite loop.
  //printf("done\n");
  //while (true) {
  //  wait(100, msec);
  //}

  /* ---------- CODE THAT TESTS FUNCTIONS ---------- */
  /* ---------- it doesnt work because c++  disables exceptions by default and idk how to activate them ----------*/
  Brain.Screen.setCursor(1,1);
  /*Brain.Screen.print("resetArmAngle(); "); try {resetArmAngle(); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("setArmAngle(15); "); try {setArmAngle(15); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("setShooterDirection(1); "); try {setShooterDirection(1); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("camera.takeSnapshot(RED_BALL); "); try {camera.takeSnapshot(RED_BALL); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("getLargestObjectPosX(); "); try {getLargestObjectPosX(); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("getLargestObjectDistance_SingleScan(WIDTH_BALL); "); try {getLargestObjectDistance_SingleScan(WIDTH_BALL); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("yellowBallRun(); "); try {yellowBallRun(); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  Brain.Screen.print("printImage(); "); try {printImage(); Brain.Screen.print("succeeded\n");} catch (const std::exception& e) {Brain.Screen.print("failed\n");} wait(1000, msec);
  */

 /* ---------- CODE THAT TESTS FUNCTIONS LAZILY ---------- */
 //int printValue = 0;
  //setShooterDirection(1);
  //resetArmAngle(); // Good!
  //Brain.Screen.print("resetArmAngle() OK\n");
  //wait(3, sec);
  //setArmAngle(15); // Good!
  //Brain.Screen.print("setArmAngle(15) OK\n");
  //wait(3, sec);
  //setShooterSpeed(193); // Good!
  //setShooterDirection(1);
  //Brain.Screen.print("setShooterDirection(1) OK\n");
  //wait(3, sec);
  //wait(5, sec);
  //getPlayingSide();
  //printf("------------------Playing side: %d\n", PLAYING_SIDE);
  //wait(1, sec);
  //while(true) {
  //camera.takeSnapshot(RED_BALL);
  //printf("camera.takeSnapshot(RED_BALL) OK\n");
  //Brain.Screen.newLine();
  //printDetection(camera.largestObject);
  //printf("Number of detections: %d\n", camera.objectCount);
  //printf("%d ", getLargestObjectPosX_SingleScan(camera.largestObject));
  //printf("getLargestObjectPosX_SingleScan() OK\n");
  //wait(1, msec);
  //printf("%f ", getLargestObjectDistance_SingleScan(camera.largestObject, WIDTH_BALL));
  //printf("getLargestObjectDistance_SingleScan(WIDTH_BALL) OK (with width of %d)\n", camera.largestObject.width);
  //wait(3, sec);
  //printf("--------------------------------------\n");
  //}
  //std::vector<int> searchValues = {RED_BALL, BLUE_BALL, YELLOW_BALL};
  //std::vector<Detection> multipleDetection = snapshotMultipleColors(searchValues);
  //printf("snapshotMultipleColors({RED_BALL, BLUE_BALL, YELLOW_BALL}) OK\n");
  //printDetections(multipleDetection);
  //printf("g");
  //wait(3, sec);
  //printf("%d ", getLargestObjectPosX_MultipleScans(multipleDetection));
  //printf("getLargestObjectPosX_MultipleScans(multipleDetection) OK\n");
  //wait(3, sec);
  //printf("%f ", getLargestObjectDistance_MultipleScans(WIDTH_BALL, multipleDetection));
  //printf("getLargestObjectDistance_MultipleScans(WIDTH_BALL, multipleDetection) OK\n");
  //wait(3, sec);
  wait(3, sec);
  //printImage(); // Bad
  //wait(30,sec);
  //printf("printImage() OK\n");
  //yellowBallRun();
  //printf("yellowBallRun() OK\n");
  wait(3, sec);
  //searchForBalls();
  //printf("searchForBalls() OK\n");
  //shootBalls();
  //printf("shootBalls() OK\n");

}
